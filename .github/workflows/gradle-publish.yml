name: Backend CI/CD

on:
  push:
    branches: ["main"]
permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    # Gradle을 캐싱해둡니다 -> 빌드 속도가 증가하는 효과가 있습니다.
    - name: Gradle 캐싱
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
                ${{ runner.os }}-gradle-


    # 프로젝트 저장소에 업로드하면 안되는 설정 파일들을 만들어줍니다.
    - name: Make application.properties
      run: |
      	# src/main/resources으로 이동, 프로퍼티 만들어야함
        cd ./src/main/resources
        # 필요한 yml 파일들을 만들어줍니다.
        touch ./application.properties
        touch ./application-prod.properties

        # 등록해둔 Github Secrets의 내용을 이용해서 yml 파일의 내용을 써줍니다.
        echo "$APPLICATION_DEFAULT" > ./application.properties
        echo "$APPLICATION_PROD" > ./application-prod.properties

      env:
        APPLICATION_DEFAULT: ${{ secrets.APPLICATION }}
        APPLICATION_PROD: ${{ secrets.APPLICATION_PROD }}
      shell: bash

    - name: Gradle 권한 부여
      run: chmod +x gradlew

    - name: Gradle로 빌드 실행
      run: ./gradlew bootjar


      # 배포에 필요한 여러 설정 파일과 프로젝트 빌드파일을 zip 파일로 모아줍니다.
    - name: zip file 생성
      run: |
        mkdir deploy
        cp ./docker/docker-compose.blue.yml ./deploy/
        cp ./docker/docker-compose.green.yml ./deploy/
        cp ./appspec.yml ./deploy/
        cp ./docker/Dockerfile ./deploy/
        cp ./scripts/*.sh ./deploy/
        cp ./build/libs/*.jar ./deploy/
        zip -r -qq -j ./spring-build.zip ./deploy

	# AWS에 연결해줍니다.
    - name: AWS 연결
      uses: aws-actions/configure-aws-credentials@v1
      #IAM 설정임
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

	# S3에 프로젝트를 업로드 합니다.
    - name: S3에 프로젝트 업로드
      run: |
        aws s3 cp \
        --region ap-northeast-2 \
        ./spring-build.zip s3://myawsbucket-cicd-hong

    # CodeDelploy에 배포를 요청합니다.
    - name: Code Deploy 배포 요청
      run: aws deploy create-deployment \
        --application-name practice \
        --deployment-config-name CodeDeployDefault.OneAtATime \
        --deployment-group-name test-hong \
        --s3-location bucket=myawsbucket-cicd-hong,bundleType=zip,key=spring-build.zip
          
      # 이 구문을 추가해야 빌드 성공 실패와 상관없이 동작합니다.
      if: always()


    - name: Publish to GitHub Packages
      run: ./gradlew publish
      env:
        USERNAME: ${{ github.actor }}
        TOKEN: ${{ secrets.GITHUB_TOKEN }}
