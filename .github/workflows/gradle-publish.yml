name: Backend CI/CD

on:
  push:
    paths:
      - 'server/Be/**'
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        server-id: github
        settings-path: ${{ github.workspace }}

    - name: Gradle 캐싱
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('server/Be/**/*.gradle*', 'server/Be/**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    # application.properties 생성
    - name: Make application.properties
      run: |
        cd ./server/Be/src/main/resources
        touch application.properties
        touch application-prod.properties
        echo "$APPLICATION_DEFAULT" > application.properties
        echo "$APPLICATION_PROD" > application-prod.properties
      env:
        APPLICATION_DEFAULT: ${{ secrets.APPLICATION }}
        APPLICATION_PROD: ${{ secrets.APPLICATION_PROD }}
      shell: bash

    - name: Gradle 권한 부여
      run: chmod +x server/Be/gradlew

    - name: Gradle로 빌드 실행
      working-directory: server/Be
      run: ./gradlew bootjar

    # zip 파일 생성
    - name: zip file 생성
      run: |
        mkdir -p deploy/scripts
        cp ./server/Be/docker/docker-compose.blue.yml ./deploy/
        cp ./server/Be/docker/docker-compose.green.yml ./deploy/
        cp ./server/Be/appspec.yml ./deploy/
        cp ./server/Be/docker/Dockerfile ./deploy/
        cp ./server/Be/scripts/*.sh ./deploy/scripts/
        cp ./server/Be/build/libs/*.jar ./deploy/
        cd deploy
        zip -r ../spring-build.zip .
        cd ..

    # AWS 연결
    - name: AWS 연결
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    # S3 업로드
    - name: S3에 프로젝트 업로드
      run: |
        aws s3 cp \
        --region ap-northeast-2 \
        ./spring-build.zip s3://myawsbucket-cicd-hong

    # CodeDeploy 배포 요청
    - name: Code Deploy 배포 요청
      if: always()
      run: |
        aws deploy create-deployment \
        --application-name practice \
        --deployment-config-name CodeDeployDefault.OneAtATime \
        --deployment-group-name test-hong \
        --s3-location bucket=myawsbucket-cicd-hong,bundleType=zip,key=spring-build.zip

    # (옵션) GitHub Packages 퍼블리시
    - name: Publish to GitHub Packages
      working-directory: server/Be
      run: ./gradlew publish
      env:
        USERNAME: ${{ github.actor }}
        TOKEN: ${{ secrets.GITHUB_TOKEN }}
